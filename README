Operating system code runs in "kernel mode", in which the full range of instructions of the
architecture is allowed by the CPU. The “kernel mode” includes instructions that control the
hardware and should not be used by normal code which runs in “user mode”. When code in “user
mode” executes a system call, the CPU must change the execution mode. This operation is called
a "trap".
In the first part of the exercise we’ve seen strace - an application which inserts itself between the
user’s code and the operating system. In the Tirgul, we’ve seen valgrind, inserting itself between
the user’s code and memory access. Taking this principle to the extreme, virtualisation runs code
in a simulated computer with its own OS and hardware.
In this project, i will measure the overhead involved in traps and virtualisation.

This assignment has four parts:
1. Coding a (static) library that measures the time
it takes to run various operations
2. Setting up a virtual machine (VM)
3. Setting up a container
4. Using the library to measure times
• Directly on the computer
• inside the VM
• inside the container
and showing the results in a graph



EX: 1

FILES:
- Makefile - A makefile to the osm.cpp.
- osm.cpp - Implementaion of the osm.h.
- graph - Measurements results graph.


REMARKS:
------

ANSWERS:

Q1: Assignment 1 

We Used strace to understand what a program -"WhatIDo arg" is doing. 
The steps of the program are:

- Opens the directory named "Welcome".
- Opens the directory "To" in the previous directory "Welcome" - (Welcome\To).
- Inside the "To" directory, opens a new file named "OS2021" - (Welcome\To\OS2021).
- Use the "fstat" function to handle the file where we want to write.
- Writes in the file "username
	  	      If you haven't read the course guidline yet --- do it right now! 
	              arg".
- Close the file.
- Deletes the file.
- Deletes the folder "TO".
- Deletes the folder "Welcome".
- Close the program and all the threads in the process.




